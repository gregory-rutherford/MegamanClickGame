{"version":3,"sources":["components/Header.js","components/Wrapper.js","components/RobotCard.js","components/Nav.js","components/Content.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Wrapper","props","children","RobotCard","alt","name","src","image","onClick","clicky","id","Nav","message","score","topScore","Content","App","state","robots","maxScore","messageBoard","storage","processClick","_this$state","_this","currentScore","length","setState","reset","includes","setTop","push","shuffle","masters","i","x","Math","floor","random","_ref","characters","_this$state2","_this2","this","components_Wrapper","components_Nav","components_Header","components_Content","map","robot","components_RobotCard","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4781498e.chunk.js","sourcesContent":["import React from \"react\";\nimport \"../css/Header.css\";\n\n\nconst Header = () => \n\n            <header className=\"top\">\n                <h1>Megaman II Memory Game</h1>\n                <h3>Click on a Robot Master to earn points, do not click on any image more than once!</h3>\n            </header>\n\n\nexport default Header;","import React from 'react';\nimport '../css/Wrapper.css';\n\n\nconst Wrapper = (props) => \n    <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"../css/RobotCard.css\"\n\nconst RobotCard = (props) => \n    <div className=\"card\">\n        <div className=\"img-container\">\n          <img \n          alt={props.name} \n          src={props.image}\n        onClick={() => props.clicky(props.id)}\n          />\n        </div>\n        <div className=\"content\">\n            <p>\n               {props.name}\n            </p>\n        </div>\n      </div>\n\n\nexport default RobotCard;\n","import React from \"react\";\nimport \"../css/Nav.css\";\n\nconst Nav = (props) => \n      <div className=\"navbar\">\n        <nav>\n          <p>Megaman II Memory Game</p>\n          <p>{props.message}</p>\n          <p>Score: {props.score} | Top Score: {props.topScore}</p>\n        \n        </nav>\n      </div>\n\n\nexport default Nav;","import React from 'react';\nimport '../css/Content.css';\nconst Content = (props) =>\n    <div className=\"site-content\">\n    {props.children}\n    </div>\n\nexport default Content;","import React from \"react\";\nimport Header from \"./components/Header\";\nimport Wrapper from \"./components/Wrapper\";\nimport robots from \"./robots.json\";\nimport RobotCard from \"./components/RobotCard\";\nimport Nav from \"./components/Nav\";\nimport Content from \"./components/Content\";\n\nclass App extends React.Component {\n  state = {\n    robots,\n    score: 0,\n    topScore: 0,\n    maxScore: 9,\n    messageBoard: \"\",\n    storage: []\n  };\n\n  processClick = id => {\n    //variables needed for scoreboard and keeping track of clicked images\n    const { score, storage } = this.state;\n    const currentScore = score + 1;\n    // detect win\n    if (storage.length >= this.state.maxScore - 1) {\n      this.setState({ messageBoard: \"You Won! Click to play again.\" });\n      this.reset();\n    }\n    //if incorrect update the messageboard and reset the game\n    else if (storage.includes(id)) {\n      this.setTop();\n      this.setState({ messageBoard: \"Incorrect! Try Again.\" });\n      this.reset();\n    }\n    //if correct push the id of the guessed into array, pass new pushed array and update scorebooard using setState\n    else {\n      storage.push(id);\n      this.setState({\n        storage,\n        score: currentScore,\n        messageBoard: \"Correct!\"\n      });\n      this.shuffle();\n    }\n  };\n\n  shuffle = () => {\n    //copy the data array\n    const masters = this.state.robots;\n    //algorithm for shuffling arrays\n    for (let i = masters.length - 1; i > 0; i--) {\n      let x = Math.floor(Math.random() * (i + 1)); //random index from 0 to i\n      [masters[i], masters[x]] = [masters[x], masters[i]]; //swap elements\n    }\n    //return the newly shuffled array to the react setState function\n    this.setState({ characters: masters });\n  };\n\n  reset = () => {\n    this.shuffle();\n    //clear array of clicked images and reset score to zero\n    this.setState({\n      storage: [],\n      score: 0\n    });\n  };\n\n  setTop = () => {\n    const { score, topScore } = this.state;\n    if (topScore < score) {\n      this.setState({ topScore: score });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Wrapper>\n          <Nav\n            topScore={this.state.topScore}\n            score={this.state.score}\n            message={this.state.messageBoard}\n          />\n          <Header />\n          <Content>\n            {this.state.robots.map(robot => (\n              <RobotCard\n                id={robot.id}\n                key={robot.id}\n                name={robot.name}\n                image={robot.image}\n                clicky={this.processClick}\n              />\n            ))}\n          </Content>\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}